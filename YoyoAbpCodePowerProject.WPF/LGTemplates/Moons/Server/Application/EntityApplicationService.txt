@using YoyoSoft.AbpDtoGenerator.HtmlControlNames
@model AbpDtoGenerator.GeneratorModels.ViewModel

@{
    var data = Model.Server;
    var option = Model.MainWindowsOptionCfg;
    var isHaveEnums = data.Entity.Properties.Any(a => a.ContrlType == AppYoYoSoftControlNames.Enums);
}
using Abp.Application.Services.Dto;
using Abp.Authorization;
using Abp.AutoMapper;
using Abp.Linq.Extensions;
using Abp.Extensions;
using Abp.Domain.Repositories;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading.Tasks;
using @data.Entity.Namespace;
using @{@data.Entity.Namespace}.Dtos;
using AutoMapper.QueryableExtensions;
@data.ReplaceInfo.DomainServicesNamespace
using @data.ReplaceInfo.CompanyNamespace@{@data.ReplaceInfo.SolutionNamespace}.Dto;
using @data.ReplaceInfo.CompanyNamespace@{@data.ReplaceInfo.SolutionNamespace}.Authorization;
using MOONS.XST.LocalizedRecords;


namespace @data.Entity.Namespace
{
    /// <summary>
    /// @{@data.Entity.EntityDisplayName}应用层服务的接口实现方法
    ///</summary>
    [AbpAuthorize]
    public class @{@data.Entity.Name}AppService : @{@data.ReplaceInfo.SolutionNamespace}AppServiceBase, I@{@data.Entity.Name}AppService
    {
         private readonly IRepository<@{@data.Entity.Name}, @data.Entity.EntityKeyName>        _@{@data.Entity.LowerName}Repository;
		 		private readonly IRepository<LocalDDList, long> _localDDListRepo;  
				 

        @data.ReplaceInfo.PrivateIEntityNameManager
		
        /// <summary>
        /// 构造函数
        ///</summary>
        public @{@data.Entity.Name}AppService(
		IRepository<@{@data.Entity.Name}, @data.Entity.EntityKeyName>  @{@data.Entity.LowerName}Repository
              @data.ReplaceInfo.IEntityNameManager       
            , IRepository<LocalDDList, long> localDDListRepo

                                                                                      
             )
            {
            _@{@data.Entity.LowerName}Repository = @{@data.Entity.LowerName}Repository;
            @data.ReplaceInfo.EntityNameManager
          			_localDDListRepo = localDDListRepo;

         

            }


            /// <summary>
                /// 获取@{@data.Entity.EntityDisplayName}的分页列表信息
                ///      </summary>
            /// <param name="input"></param>
            /// <returns></returns>
            @data.ReplaceInfo.PermissionQuery
            public async Task<PagedResultDto<Get@{@data.Entity.Name}ForViewDto>> GetPaged(XSTQueryDataDto input)
		{

		            var dataRange = GetUserDataRange(input.ExtendParamList[0]);

					 var query =  Query@{@data.Entity.Name}s()
                .WhereDataRange(dataRange)
                .WhereCustom(input.QueryCondsList)
                .AsNoTracking();

			var count = await query.CountAsync();

			var @{@data.Entity.LowerName}ListDtos = await query.AsNoTracking()
					.OrderBy(input.Sorting)
					.PageBy(input)
					.ToListAsync();

 
			return new PagedResultDto<Get@{@data.Entity.Name}ForViewDto>(count,@{@data.Entity.LowerName}ListDtos);
		}


	

		/// <summary>
		/// 获取编辑 @{@data.Entity.EntityDisplayName}
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		@data.ReplaceInfo.EntityCreateOrEditPermission
		public async Task<Get@{@data.Entity.Name}ForEditOutput> GetForEdit(@data.Entity.EntityKeyName input)
		{
			var output = new Get@{@data.Entity.Name}ForEditOutput();
			@{@data.Entity.Name}EditDto editDto;

		
				var entity = await _@{@data.Entity.LowerName}Repository.GetAsync(input);
				editDto = ObjectMapper.Map<@{@data.Entity.Name}EditDto>(entity);
			
            
            output.@{@data.Entity.Name} = editDto;
			return output;
		}


		/// <summary>
		/// 添加或者修改@{@data.Entity.EntityDisplayName}的公共方法
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		@data.ReplaceInfo.EntityCreateOrEditPermission
		public async Task<@data.Entity.EntityKeyName> CreateOrUpdate(Get@{@data.Entity.Name}ForViewDto input)
		{

			if (input.Entity.Id.HasValue)
			{
			return	await Update(input.Entity);
			}
			else
			{
		return		await Create(input.Entity);
			}
		}


		/// <summary>
		/// 新增@{@data.Entity.EntityDisplayName}
		/// </summary>
		@data.ReplaceInfo.PermissionCreate
		protected virtual async Task<@data.Entity.EntityKeyName> Create(@{@data.Entity.Name}EditDto input)
		{
			//TODO:新增前的逻辑判断，是否允许新增

            var entity = ObjectMapper.Map<@{@data.Entity.Name}>(input);
            //调用领域服务
            entity = await _@{@data.Entity.LowerName}Manager.CreateAsync(entity);

             return entity.Id;
		}

		/// <summary>
		/// 编辑@{@data.Entity.EntityDisplayName}
		/// </summary>
		@data.ReplaceInfo.PermissionEdit
		protected virtual async Task<@data.Entity.EntityKeyName> Update(@{@data.Entity.Name}EditDto input)
		{
			//TODO:更新前的逻辑判断，是否允许更新

		 var entity = await _@{@data.Entity.LowerName}Repository.GetAsync(input.Id.Value);
       
          //将input属性的值赋值到entity中
             ObjectMapper.Map(input, entity);
            await _@{@data.Entity.LowerName}Manager.UpdateAsync(entity);
				return entity.Id;
		}



		/// <summary>
		/// 删除@{@data.Entity.EntityDisplayName}信息
		/// </summary>
		/// <param name="input"></param>
		/// <returns></returns>
		@data.ReplaceInfo.PermissionDelete
		public async Task Delete(List<@data.Entity.EntityKeyName> input)
		{
			//TODO:删除前的逻辑判断，是否允许删除
			////如果开启了软删除，则进行软删除
           await _@{@data.Entity.LowerName}Manager.BatchDelete(input);
		}


 

		  /// <summary>
		  /// 对@{@data.Entity.EntityDisplayName}进行自定义的复杂查询功能
		  /// </summary>
		  /// <returns></returns>
		  private IQueryable<Get@{@data.Entity.Name}ForViewDto> Query@{@data.Entity.Name}s(){
		  
				  //todo://请进行自定义的逻辑扩展和优化
				var query = from dtos in _@{@data.Entity.LowerName}Repository.GetAll().ProjectTo<@{@data.Entity.Name}EditDto>(MapperProvider)

						select new Get@{@data.Entity.Name}ForViewDto
						{
							Entity = dtos
						};	
			 

			return query;

 
		  }




							//// custom codes


							@{@ViewBag.OldCustomCode}
							//// custom codes end

    }
}


