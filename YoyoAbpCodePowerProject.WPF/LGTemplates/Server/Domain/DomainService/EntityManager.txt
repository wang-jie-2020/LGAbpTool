@{
    var data = Model.Server;
}
using Abp.Domain.Repositories;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace @{@data.Entity.Namespace}.DomainService
{
    /// <summary>
    /// @{@data.Entity.EntityDisplayName}核心业务逻辑
    ///</summary>
    public class @{@data.Entity.Name}Manager : @{@data.ReplaceInfo.SolutionNamespace}DomainServiceBase, I@{@data.Entity.Name}Manager
    {
		private readonly IRepository<@{@data.Entity.Name}, @{@data.Entity.EntityKeyName}> _@{@data.Entity.LowerName}Repository;

		/// <summary>
		/// @{@data.Entity.Name}的构造方法
		///</summary>
	    public @{@data.Entity.Name}Manager(IRepository<@{@data.Entity.Name}, @{@data.Entity.EntityKeyName}> @{@data.Entity.LowerName}Repository)	
        {
			_@{@data.Entity.LowerName}Repository = @{@data.Entity.LowerName}Repository;
		}

        /// <summary>
        /// 返回表达式数的实体信息即IQueryable类型
        /// </summary>
        /// <returns></returns>
        public IQueryable<@{@data.Entity.Name}> QueryAll()
        {
            return _@{@data.Entity.LowerName}Repository.GetAll().AsNoTracking();
        }

        /// <summary>
        /// 根据Id查询实体信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<@{@data.Entity.Name}> Find(@{@data.Entity.EntityKeyName} id)
        {
            var entity = await _@{@data.Entity.LowerName}Repository.GetAsync(id);
            return entity;
        }

        /// <summary>
        /// 检查实体是否存在
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<bool> IsExist(@{@data.Entity.EntityKeyName} id)
        {
            var result = await _@{@data.Entity.LowerName}Repository.GetAll().AnyAsync(a => a.Id == id);
            return result;
        }

        public async Task<@{@data.Entity.Name}> Create(@{@data.Entity.Name} entity)
        {
            entity.Id = await _@{@data.Entity.LowerName}Repository.InsertAndGetIdAsync(entity);
            return entity;
        }

        public async Task Update(@{@data.Entity.Name} entity)
        {
            await _@{@data.Entity.LowerName}Repository.UpdateAsync(entity);
        }

        public async Task Delete(@{@data.Entity.EntityKeyName} id)
        {
            await _@{@data.Entity.LowerName}Repository.DeleteAsync(id);
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task BatchDelete(List<@{@data.Entity.EntityKeyName}> input)
        {
            await _@{@data.Entity.LowerName}Repository.DeleteAsync(a => input.Contains(a.Id));
        }
	 
		//// custom codes
													
		<pre>@{@ViewBag.OldCustomCode}</pre>

		//// custom codes end
	}
}
